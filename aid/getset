#ifndef Server_HPP
#define Server_HPP

class Server
{
    public :
        Server(void);
        Server(const Server &cop);
        Server &operator=(const Server &eg);
        virtual ~Server(void);
    private :

};

#endif

#include "Server.hpp"

Server::Server(void)
{
    return;
}
Server::Server(const Server &cop)
{
    *this = cop;
}
Server &Server::operator=(const Server &eg)
{
    if (this != &eg)
    {

    }
    return (*this);
}
Server::~Server(void)
{
    return;
}

std::string Server::getpasswrd_serv(void) const
{
    return (this->_passwrd_serv);
}

void Server::setpasswrd_serv(std::string str)
{
    this->_passwrd_serv = str;
}

int Server::getpasswrd_serv(void) const
{
    return (this->_passwrd_serv);
}

void Server::setpasswrd_serv(int i)
{
    this->_passwrd_serv = i;
}
bool Server::getonly_inviteState(void) const
{
    return (this->_only_invite);
}

void Server::setonly_inviteTrue(void)
{
    this->_only_invite = true;
}
void Server::setonly_inviteFalse(void)
{
    this->_only_invite = false;
}

